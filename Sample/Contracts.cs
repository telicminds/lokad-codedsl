using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable UnusedMember.Local
namespace Lokad
{
    #region Generated by Lokad Code DSL
    [DataContract(Namespace = "Lokad")]
	public partial class UniverseId : IIdentity
    {
        [DataMember(Order = 1)]
		public virtual long Id { get; set; }
        
        public UniverseId () {}
        public UniverseId (long id)
        {
            Id = id;
        }
        public override string ToString()
		{
			return Id.ToString();
		}

		protected bool Equals(UniverseId other)
		{
			return Id.Equals(other.Id);
		}

		public override bool Equals(object obj)
		{
			if (ReferenceEquals(null, obj)) return false;
			if (ReferenceEquals(this, obj)) return true;
			if (obj.GetType() != this.GetType()) return false;
			return Equals((UniverseId) obj);
		}

		public override int GetHashCode()
		{
			return Id.GetHashCode();
		}

		public static bool operator ==(UniverseId a, UniverseId b)
		{
			if (ReferenceEquals(a, b))
			{
				return true;
			}
			if (((object) a == null) || ((object) b == null))
			{
				return false;
			}
			return a.Equals(b);
		}

		public static bool operator !=(UniverseId a, UniverseId b)
		{
			return !(a == b);
		}

		public static UniverseId New()
		{
			return new UniverseId(Guid.NewGuid());
		}
        
		public static UniverseId Empty()
		{
			return new UniverseId(Guid.Empty);
		}
    }
    [DataContract(Namespace = "Lokad")]
	public partial class GalaxyId : IIdentity
    {
        [DataMember(Order = 1)]
		public virtual long Id { get; set; }
        
        public GalaxyId () {}
        public GalaxyId (long id)
        {
            Id = id;
        }
        public override string ToString()
		{
			return Id.ToString();
		}

		protected bool Equals(GalaxyId other)
		{
			return Id.Equals(other.Id);
		}

		public override bool Equals(object obj)
		{
			if (ReferenceEquals(null, obj)) return false;
			if (ReferenceEquals(this, obj)) return true;
			if (obj.GetType() != this.GetType()) return false;
			return Equals((GalaxyId) obj);
		}

		public override int GetHashCode()
		{
			return Id.GetHashCode();
		}

		public static bool operator ==(GalaxyId a, GalaxyId b)
		{
			if (ReferenceEquals(a, b))
			{
				return true;
			}
			if (((object) a == null) || ((object) b == null))
			{
				return false;
			}
			return a.Equals(b);
		}

		public static bool operator !=(GalaxyId a, GalaxyId b)
		{
			return !(a == b);
		}

		public static GalaxyId New()
		{
			return new GalaxyId(Guid.NewGuid());
		}
        
		public static GalaxyId Empty()
		{
			return new GalaxyId(Guid.Empty);
		}
    }
    [DataContract(Namespace = "Lokad")]
	public partial class Universe
    {
        [DataMember(Order = 1)]
		public virtual UniverseId Id { get; set; }
        [DataMember(Order = 2)]
		public virtual string Name { get; set; }
        
        public Universe () {}
        public Universe (UniverseId id, string name)
        {
            Id = id;
            Name = name;
        }
    }
    [DataContract(Namespace = "Lokad")]
	public partial class CreateUniverse : IUniverseCommand
    {
        [DataMember(Order = 1)]
		public virtual int? Version { get; set; }
        [DataMember(Order = 2)]
		public virtual UniverseId Id { get; set; }
        [DataMember(Order = 3)]
		public virtual string Name { get; set; }
        
        public CreateUniverse () {}
        public CreateUniverse (int? version, UniverseId id, string name)
        {
            Version = version;
            Id = id;
            Name = name;
        }
        
        public override string ToString()
        {
            return string.Format(@"Create universe - {0}", Name);
        }
    }
    public interface IUniverseCreated : IUniverseEvent<UniverseId>
    {
        UniverseId Id { get; }
        string Name { get; }
        
    }
    [DataContract(Namespace = "Lokad")]
	public partial class UniverseCreated : DomainEvent, IUniverseCreated
    {
        [DataMember(Order = 1)]
		public virtual UniverseId Id { get; set; }
        [DataMember(Order = 2)]
		public virtual string Name { get; set; }
        
        public UniverseCreated () {}
        public UniverseCreated (TenancyId tenancyId, int aggregateVersion, UniverseId id, string name) : base(tenancyId, id, aggregateVersion)
        {
            Id = id;
            Name = name;
        }
        
        public override string ToString()
        {
            return string.Format(@"Universe {0} created", Name);
        }
    }
    [DataContract(Namespace = "Lokad")]
	public partial class DestroyUniverse : IUniverseCommand
    {
        [DataMember(Order = 1)]
		public virtual int? Version { get; set; }
        [DataMember(Order = 2)]
		public virtual UniverseId Id { get; set; }
        [DataMember(Order = 3)]
		public virtual string Reason { get; set; }
        
        public DestroyUniverse () {}
        public DestroyUniverse (int? version, UniverseId id, string reason)
        {
            Version = version;
            Id = id;
            Reason = reason;
        }
        
        public override string ToString()
        {
            return string.Format(@"Destroy universe, reason - {0}", Reason);
        }
    }
    public interface IUniverseDestroyed : IUniverseEvent<UniverseId>
    {
        UniverseId Id { get; }
        string Reason { get; }
        
    }
    [DataContract(Namespace = "Lokad")]
	public partial class UniverseDestroyed : DomainEvent, IUniverseDestroyed
    {
        [DataMember(Order = 1)]
		public virtual UniverseId Id { get; set; }
        [DataMember(Order = 2)]
		public virtual string Reason { get; set; }
        
        public UniverseDestroyed () {}
        public UniverseDestroyed (TenancyId tenancyId, int aggregateVersion, UniverseId id, string reason) : base(tenancyId, id, aggregateVersion)
        {
            Id = id;
            Reason = reason;
        }
        
        public override string ToString()
        {
            return string.Format(@"Universe destroyed, reason - {0}", Reason);
        }
    }
    [DataContract(Namespace = "Lokad")]
	public partial class AddGalaxy : IUniverseCommand
    {
        [DataMember(Order = 1)]
		public virtual int? Version { get; set; }
        [DataMember(Order = 2)]
		public virtual UniverseId Id { get; set; }
        [DataMember(Order = 3)]
		public virtual string Name { get; set; }
        [DataMember(Order = 4)]
		public virtual GalaxyType Type { get; set; }
        
        public AddGalaxy () {}
        public AddGalaxy (int? version, UniverseId id, string name, GalaxyType type)
        {
            Version = version;
            Id = id;
            Name = name;
            Type = type;
        }
        
        public override string ToString()
        {
            return string.Format(@"Create {1} galaxy - {0}", Name, Type);
        }
    }
    public interface IGalaxyAdded : IUniverseEvent<UniverseId>
    {
        UniverseId Id { get; }
        GalaxyId GalaxyId { get; }
        string Name { get; }
        GalaxyType Type { get; }
        DateTime DateUtc { get; }
        
    }
    [DataContract(Namespace = "Lokad")]
	public partial class GalaxyAdded : DomainEvent, IGalaxyAdded
    {
        [DataMember(Order = 1)]
		public virtual UniverseId Id { get; set; }
        [DataMember(Order = 2)]
		public virtual GalaxyId GalaxyId { get; set; }
        [DataMember(Order = 3)]
		public virtual string Name { get; set; }
        [DataMember(Order = 4)]
		public virtual GalaxyType Type { get; set; }
        [DataMember(Order = 5)]
		public virtual DateTime DateUtc { get; set; }
        
        public GalaxyAdded () {}
        public GalaxyAdded (TenancyId tenancyId, int aggregateVersion, UniverseId id, GalaxyId galaxyId, string name, GalaxyType type, DateTime dateUtc) : base(tenancyId, id, aggregateVersion)
        {
            Id = id;
            GalaxyId = galaxyId;
            Name = name;
            Type = type;
            DateUtc = dateUtc;
        }
        
        public override string ToString()
        {
            return string.Format(@"[{2:yyyy.MM.dd HH:mm}] Galaxy {0} of type {1} added to universe.", Name, Type, DateUtc);
        }
    }
    [DataContract(Namespace = "Lokad")]
	public partial class WipeGalaxy : IUniverseCommand
    {
        [DataMember(Order = 1)]
		public virtual int? Version { get; set; }
        [DataMember(Order = 2)]
		public virtual UniverseId Id { get; set; }
        [DataMember(Order = 3)]
		public virtual GalaxyId GalaxyId { get; set; }
        [DataMember(Order = 4)]
		public virtual string Reason { get; set; }
        
        public WipeGalaxy () {}
        public WipeGalaxy (int? version, UniverseId id, GalaxyId galaxyId, string reason)
        {
            Version = version;
            Id = id;
            GalaxyId = galaxyId;
            Reason = reason;
        }
        
        public override string ToString()
        {
            return string.Format(@"Wipe galaxy {0}, reason - {1}", GalaxyId, Reason);
        }
    }
    public interface IGalaxyWiped : IUniverseEvent<UniverseId>
    {
        UniverseId Id { get; }
        GalaxyId GalaxyId { get; }
        string Name { get; }
        string Reason { get; }
        DateTime DateUtc { get; }
        
    }
    [DataContract(Namespace = "Lokad")]
	public partial class GalaxyWiped : DomainEvent, IGalaxyWiped
    {
        [DataMember(Order = 1)]
		public virtual UniverseId Id { get; set; }
        [DataMember(Order = 2)]
		public virtual GalaxyId GalaxyId { get; set; }
        [DataMember(Order = 3)]
		public virtual string Name { get; set; }
        [GreaterThanOrEqualTo("Mins")]
        [DataMember(Order = 4)]
		public virtual string Reason { get; set; }
        [DataMember(Order = 5)]
		public virtual DateTime DateUtc { get; set; }
        
        public GalaxyWiped () {}
        public GalaxyWiped (TenancyId tenancyId, int aggregateVersion, UniverseId id, GalaxyId galaxyId, string name, string reason, DateTime dateUtc) : base(tenancyId, id, aggregateVersion)
        {
            Id = id;
            GalaxyId = galaxyId;
            Name = name;
            Reason = reason;
            DateUtc = dateUtc;
        }
        
        public override string ToString()
        {
            return string.Format(@"[{2:yyyy.MM.dd HH:mm}] Galaxy {0} wiped, reason - {1}", Name, Reason, DateUtc);
        }
    }
    
    public interface IUniverseAggregate
    {
        void When(CreateUniverse c);
        void When(DestroyUniverse c);
        void When(AddGalaxy c);
        void When(WipeGalaxy c);
    }
    
    public interface IUniverseAggregateState
    {
        void Apply(UniverseCreated e);
        void Apply(UniverseDestroyed e);
        void Apply(GalaxyAdded e);
        void Apply(GalaxyWiped e);
    }
    #endregion
}
